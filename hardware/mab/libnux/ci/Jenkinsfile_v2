#!/usr/bin/env groovy

node {

	// Default to false to ensure failure messages are sent
	GERRIT_BUILD = false

	try {
		cleanWs()

		stage('checkout') {

			dir('libnux') {
				checkout scm    // for CI files
			}

			try {
				run_with_modules("waf setup " +
						"--project libnux " +
						"--project hicann-dls-scripts " +
						"--clone-depth 1 " +
						"--gerrit-changes=${GERRIT_CHANGE_NUMBER} " +
						"--gerrit-url=ssh://hudson@$GERRIT_HOST:$GERRIT_PORT" as String)
				GERRIT_BUILD = true
			} catch (MissingPropertyException ignored) {     // Jenkinsfile not called via Gerrit
				run_with_modules("waf setup " +
						"--project libnux " +
						"--project hicann-dls-scripts " +
						"--clone-depth 1 " as String)
			}
		}

		stage("Build") {
			srun_jenkins("waf configure install --dls-version=2 --test-execnone")
		}

		stage("Hardware Tests") {
			run_ppu_tests("07", ".*/test_.*\\.binary")
		}

	} catch (Exception e) {
		post_error_build_action()
		throw e as java.lang.Throwable
	} finally {
		post_all_build_action()
	}

	// Some Jenkins steps fail a build without raising (e.g. archiveArtifacts)
	if (currentBuild.currentResult != "SUCCESS") {
		post_error_build_action()
	}
}

/*
/* HELPER FUNCTIONS
*/

void run_with_modules(String command) {
	sh "module purge && " +
			"module load spack_visionary-defaults/autobuild && " +
			"module load waf && " +
			"module load gcc-nux && " +
			"module load frickel-dls/current && ${command}"
}

void srun_jenkins(String command) {
	run_with_modules("srun -p jenkins -c 8 --mem 15G ${command}" as String)
}

void run_with_board_allocation(String board_id, String command) {
	run_with_modules("echo \"${command}\" | salloc -p dls --gres=${board_id}" as String)
}

void run_ppu_tests(String board_id, String regex) {
	run_with_board_allocation(board_id,
			"find firmware -regex \"${regex}\" -print0 | xargs -n 1 -0 srun python hicann-dls-scripts/run_program.py --as_string" as String
	)
}

void post_all_build_action() {
	// Scan for compiler warnings
	warnings canComputeNew: false,
			canRunOnFailed: true,
			categoriesPattern: '',
			consoleParsers: [[parserName: 'GNU C Compiler 4 (gcc)']],
			defaultEncoding: '',
			excludePattern: '',
			healthy: '',
			includePattern: '',
			messagesPattern: '',
			unHealthy: '',
			unstableTotalAll: '0',
			unstableTotalHigh: '0',
			unstableTotalLow: '0',
			unstableTotalNormal: '0'

	// Always clean the workspace
	cleanWs()
}

void post_error_build_action() {
	if (!GERRIT_BUILD) {
		mattermostSend(channel: "#dls-software",
				text: "@channel Jenkins build `${env.JOB_NAME}` has failed!",
				message: "${env.BUILD_URL}",
				endpoint: "https://brainscales-r.kip.uni-heidelberg.de:6443/hooks/qrn4j3tx8jfe3dio6esut65tpr")
	}
}

